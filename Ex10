using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

struct star
{
    public int pI;
    public int pJ;
}
namespace b10
{
    class Program
    {
        public int m = 0, d=0;
        public int coutStar = 0;
        public bool[,] DanhDau = new bool[15, 15];
        public int[,] A = new int[15, 15];
        public int[,] B = new int[15, 15];
        public Stack<star> starStack = new Stack<star>();
        public Stack<star> road = new Stack<star>();
        public star[] DuongDi = new star[40];

        public void InputFile(string input)
        {
            int i;
            string temp = "";
            string[] lines = File.ReadAllLines(input);
            foreach (string s in lines)
            {
                temp = "" + s;
                while (temp.Contains(" ")) temp=temp.Replace(" ", "");
                for (i = 0; i < temp.Length; i++)
                {
                    A[m, i] = Int16.Parse(temp[i].ToString());
                    DanhDau[m, i] = true;
                }
                m++;
            }
        }

        public void DFS()
        {
            int i = 0, j = 0;
            if (A[i, j] == 0 && DanhDau[i, j])
            {

                star sta = new star();
                sta.pI = i; sta.pJ = j;
                starStack.Push(sta);
                while (starStack.Count > 0)
                {
                    
                    star mStar = starStack.Pop();
                    if ((mStar.pI == m - 1) && (mStar.pJ == m - 1)) break;
                    int bot = mStar.pI + 1;
                    int right = mStar.pJ + 1;

                    if (bot < m && A[bot, mStar.pJ] == 0 && DanhDau[bot, mStar.pJ])
                    {
                        DanhDau[bot, mStar.pJ] = false;
                        star BotStar = new star();
                        BotStar.pI = bot;
                        BotStar.pJ = mStar.pJ;
                        starStack.Push(BotStar);
                    }
                    if (right < m && A[mStar.pI, right] == 0 && DanhDau[mStar.pI, right])
                    {
                        DanhDau[mStar.pI, right] = false;
                        star RightStar = new star();
                        RightStar.pI = mStar.pI;
                        RightStar.pJ = right;
                        starStack.Push(RightStar);
                    }
                }
            }
        }
        public void back()
        {
            int i = m-1, j = m-1;
            while(i!=0 && j!=0)
            {
                star backStar = new star();
                if(DanhDau[i,j-1]==false)
                {//sang trai
                    backStar.pI = i;
                    backStar.pJ = j - 1;
                    DuongDi[d] = backStar;
                    d++;
                    j--;
                }
                else
                    if(DanhDau[i-1,j]==false)
                {//len tren
                    backStar.pI = i - 1;
                    backStar.pJ = j;
                    DuongDi[d] = backStar;
                    d++;
                    i--;
                }
            }
        }

        public void KetQua()
        {
            int i, j, k=0;
            
            for (i = 0; i < m; i++)
                for (j = 0; j < m; j++)
                    B[i, j] = A[i, j];
            back();
            for (k = 0; k < d; k++) B[DuongDi[k].pI, DuongDi[k].pJ] = 5;
            for (i = 0; i < m; i++)
            {
                for (j = 0; j < m; j++)
                    Console.Write("{0}  ", B[i, j]);
                Console.WriteLine();
                Console.WriteLine();
            }
        }

        static void Main(string[] args)
        {
            Program p = new Program();
            string linkin = @"C:\Users\nnh\source\repos\b10\input_b10.txt";
            p.InputFile(linkin);
            p.DFS();
            p.KetQua();
            Console.ReadKey();
        }
    }
}
