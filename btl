using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

struct key
{
    public string word;
    public int count;
}

struct rank
{
    public int indexx;
    public int ranK;
    public int group;
}

namespace b7_HashFunction
{
    class Program
    {
        public int HashFunction(string s)
        {
            int hash = 0, i, j;
            double k = 0.618033988, m;
            for (i = 1; i <= s.Length; i++)
            {
                j = s[i - 1];
                m = j * k - (int)(j * k);
                hash = hash + (int)(m * 64 + i);
            }
            return hash;
        }

        public int[] chiso3 = new int[300];
        public int[] chiso2 = new int[300];
        public key[] _3gram = new key[10000];
        public key[] _2gram = new key[10000];
        public rank[] arrRank = new rank[50];
        public string[] data = new string[2000];
        public string[] punctuation = { ":", ",", ".", ";", "!", "?", " " };
        public int gram2 = 0, gram3 = 0;

        public string InputFile(string input)
        {
            string temp = "";
            temp = "" + File.ReadAllText(input);
            temp = temp.Replace("\n", ". ");
            temp = temp.Replace("\r", " ");
            temp = temp.Replace("  ", " ");

            return temp;
        }

        public void print(int[] arr1, key[] arr2, int n)
        {
            int i;
            for (i = 0; i < n; i++)
                Console.WriteLine("{0} {1}", arr2[arr1[i]].word, arr2[arr1[i]].count);
            Console.WriteLine();
        }

        public int devide(string essay)
        {
            string pre, now;
            int i, i_data = 0;
            data[i_data] = data[i_data] + essay[0];
            for (i = 1; i < essay.Length; i++)
            {
                now = "" + essay[i];
                pre = "" + essay[i - 1];
                if (punctuation.Contains(now) == false && punctuation.Contains(pre))
                {
                    i_data = i_data + 1;    // danh dau bat dau 1 tu
                }
                else
                {
                    if (punctuation.Contains(pre) == false && punctuation.Contains(now))
                    {
                        i_data = i_data + 1;    //danh dau bat dau 1 khoang trang hoac dau cau
                    }
                }
                data[i_data] = data[i_data] + now;
            }
            return i_data;
        }

        public void AddGram(key[] arrGram, ref int index, int[] chiso, ref int gramI, string s)
        {
            if (arrGram[index].word == null)
            {
                key g = new key();
                g.word = "" + s;
                g.count = 1;
                chiso[gramI] = index;
                arrGram[index] = g;
                gramI = gramI + 1;
            }
            else
                if (arrGram[index].word == s)
                arrGram[index].count = arrGram[index].count + 1;
            else
            {   // giai quyet xung dot - trung index
                index = index + 1;
                AddGram(arrGram, ref index, chiso, ref gramI, s);
            }
        }

        public void Gram(string[] dt, int n)
        {
            int i;
            string now, temp, two, three;

            for (i = 0; i <= n; i++)
            {
                now = "" + dt[i];
                {
                    //2 gram
                    if (now == " " && i < n)
                    {
                        two = "" + dt[i - 1] + now + dt[i + 1];
                        int index = HashFunction(two);
                        AddGram(_2gram, ref index, chiso2, ref gram2, two);
                    }
                    // 3 gram
                    if (i < n - 2)
                    {
                        temp = "" + dt[i + 2];
                        if (now == " " && temp == " ")
                        {
                            three = "" + dt[i - 1] + now + dt[i + 1] + temp + dt[i + 3];
                            int index = HashFunction(three);
                            AddGram(_3gram, ref index, chiso3, ref gram3, three); //truyen tham chieu
                        }
                    }                   
                }
            }

            Console.WriteLine("2-gram: ");
            print(chiso2, _2gram, gram2);
            Console.WriteLine("3-gram: ");
            print(chiso3, _3gram, gram3);

        }

        public void suggest(string key_word)
        {
            int i, j, length, q = 0, index;
            string n_gram;
            for (i = 0; i < gram2; i++)
            {
                length = 0;
                index = chiso2[i];
                n_gram = "" + _2gram[index].word;
                for (j = 0; j < key_word.Length; j++)
                {
                    if (key_word[j] == n_gram[j])
                        length++;
                    else break;
                }
                if (length == key_word.Length)
                {
                    arrRank[q].indexx = index;
                    arrRank[q].ranK = _2gram[index].count * 2;
                    arrRank[q].group = 2;
                    q++;
                }
            }

            for (i = 0; i < gram3; i++)
            {
                length = 0;
                index = chiso3[i];
                n_gram = "" + _3gram[index].word;
                for (j = 0; j < key_word.Length; j++)
                {
                    if (key_word[j] == n_gram[j])
                        length++;
                    else break;
                }
                if (length == key_word.Length)
                {
                    arrRank[q].indexx = index;
                    arrRank[q].ranK = _3gram[index].count * 3;
                    arrRank[q].group = 3;
                    q++;
                }
            }

            Sort(arrRank, q);

            for (i = 0; i < q; i++)
            {
                index = arrRank[i].indexx;
                if (arrRank[i].group == 2 && _2gram[index].word != null)
                    Console.WriteLine(_2gram[index].word);
                else
                if (arrRank[i].group == 3 && _3gram[index].word != null)
                    Console.WriteLine(_3gram[index].word);
            }

        }

        public void Sort(rank[] arr, int n_arr)
        {
            int i, j;
            rank temp = new rank();
            for (i = 0; i < n_arr; i++)
                for (j = n_arr - 1; j > i; j--)
                {
                    if (arr[j].ranK > arr[j - 1].ranK)
                    {
                        temp = arr[j];
                        arr[j] = arr[j - 1];
                        arr[j - 1] = temp;
                    }
                }
        }
        static void Main(string[] args)
        {
            Program p = new Program();
            string linkin = @"D:\source\repos\b10\input_b7.txt";
            string essay = p.InputFile(linkin);
            int n = p.devide(essay);
            p.Gram(p.data, n);

            string h = "1";
            string keyWord;
            do
            {
                Console.WriteLine("1 to Write. Other to Exit");
                h = "" + Console.ReadLine();
                if (h == "1")
                {
                    Console.Write("Nhap tu: ");
                    keyWord = "" + Console.ReadLine();
                    p.suggest(keyWord);
                }
            }
            while (h == "1");
        }
    }
}
